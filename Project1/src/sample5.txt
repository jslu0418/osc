1       // load 20
20
14      // copyto X
16      // copyto Y
17      // copyfrom Y Fst
27      // push
15      // copyfrom X Fst
27      // push
23      // call check current pos
43
28      // pop
14      // copyto X
28      // pop
16      // copyto Y
27      // push Y again
15      // copyfrom X
21      // jump if zero to outer loop
21
26      // dec X
20      // jump to (copyfrom X Fst)
6
28      // pop Y again (outer loop)
21      // jump to end if zero
38
1       // print new line
10
9
2
17      // copyfrom Y
14      // copyto X
26      // dec X
15      // copyfrom X
16      // copyto Y
1       // load 20 to X
20
14      // copyto X
20      // jump to (copyfrom Y Fst)
4
1	// print new line
10
9
2
50      // end (50)
17      // Function check if current pos (X, Y)is inside the circle // copyfrom Y
27      // push
15      // copyfrom X
1       // load center of circle
10
12      // Sub X, AC = 10 - X
23      // call calculate square of AC
83
14      // copyto X
28      // pop
16      // copyto Y
15      // copyfrom X
27      // push (X)
17      // copyfrom Y
1       // load center of circle
10
13      // Sub Y, AC = 10 - Y
23      // call calculate square of AC
83
14      // copyto X
28      // pop AC (first square of AC)
10      // AddX
14      // copyto X
1       // load square of radius
10     // 10 * 10
12      // Sub X ( square of radius - X)
23      // call check if AC >=0
112
21      // jump if AC=0 (means AC>=0) print a asterisk
78
1       // print space
32
9
2
24      // return (24)
1       // load asterisk (42)
42
9       // output (2)
2
24      // return (24)
27      // Function calculate square of AC // push AC
23      // call check if AC >= 0
112
21      // jumpto regular step if AC >=0
95
28      // pop AC (else set AC = -AC)
14      // copyto X
1       // load 0
0
12      // subX
14      // copyto X (AC = -AC)
27      // push X
28      // pop X
21      // jump to return if AC == 0
111
14      // copyto X
16      // copyto Y
1       // Load zero
0
27      // push AC
28      // pop AC
11      // Add Y
26      // dec X
27      // push AC
15      // copyfrom X
22      // jump to (pop AC) if dec X not zero
103
28      // pop AC (make consistent)
24      // return (24)
14      // Function check if AC >=0 or AC < 0 // copyto X
1       // load 0
0
12      // SubX
16      // copyto Y
15      // copyfrom X (start of compare)
21      // jump if zero to set AC = 0 (AC >= 0)
133
27      // push AC(X)
17      // copyfrom Y
21      // jump if zero to set AC = 1 (AC < 0)
136
14      // copyto X
26      // dec X
15      // copyfrom X
16      // copyto Y
28      // pop AC(X)
14      // copyto X
26      // dec X
20      // jump to (start of compare)
117
1       // set AC = 0
0
24      // return (24)
28      // pop (make consistent)
1       // set AC = 1
1
24      // return (24)

.1000
30      // just i return
